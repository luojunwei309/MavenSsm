<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
     
     <context:component-scan base-package="com.ljw.ssm.service"/>

     <!-- 配置事务管理器 -->
     <bean id="txManage" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
     </bean>
     
     <!-- 配置AOP事务切面 -->
     <aop:config>                 
        <aop:pointcut expression="execution(* *..*ServiceImpl.*(..))" id="txPointcut"/>
        <!-- 将切入点表达式和事务通知关联起来 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
     </aop:config>
     
     <!-- 配置事务通知 -->
     <tx:advice id="txAdvice" transaction-manager="txManage">
        <!-- 配置事务属性 -->
        <tx:attributes>
        <!-- 查询方法，配置只读属性，让数据库这是一个查询操作，能够优化 -->
          <tx:method name="get*" read-only="true"/>
          <tx:method name="find*" read-only="true"/>
          <tx:method name="query*" read-only="true"/>
          <tx:method name="count*" read-only="true"/>
          
          <!-- 增删改方法:配置事务传播行为，回滚异常 
            propagation属性：
                 REQUIRED：默认值，表示当前方法必须工作在事务中，如果当前线程上没有已经开启的事务，则自己开新的事务。如果已经有了，那么使用已开启的事务
                 REQUIRES_NEW：建议使用,表示当前方法必须工作在事务中，如果当前线程上没有已经开启的事务，则自己开新的事务。如果已经有了，还是自己开启事务
            rollback-for属性：配置事务方法针对什么样的异常回滚
                               默认：运行时异常回滚
                               建议：编译时异常和运行时异常都回滚
          -->
          
          <tx:method name="save*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
          <tx:method name="update*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
          <tx:method name="remove*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
          <tx:method name="batch*" propagation="REQUIRES_NEW" rollback-for="java.lang.Exception"/>
          
        </tx:attributes>
     </tx:advice>
     <!-- 加載外部屬性文件 -->
	<context:property-placeholder
		location="classpath:jdbc.properties" />

	<!-- 配置数据源 -->
	<bean id="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource">
		<!-- 连接数据库的用户名 -->
		<property name="username" value="${jdbc.user}" />
		<!-- 连接数据库的密码 -->
		<property name="password" value="${jdbc.password}" />
		<!-- 目标数据库的 URL 地址 -->
		<property name="url" value="${jdbc.url}" />
		<!-- 数据库驱动全类名 -->
		<property name="driverClassName" value="${jdbc.driver}" />
	</bean>
	
	<!-- 配置sqlseesionfactory整合mybatis -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
	     <!-- 指定mybatis全局配置位置 -->
	     <property name="configLocation" value="classpath:mybatis/mybatis.xml"></property>
	     <property name="mapperLocations" value="classpath:mybatis/mapper/*Mapper.xml"></property>
	     <!-- 装配数据源 -->
	     <property name="dataSource" ref="dataSource"></property>
	     
	     <!-- 配置插件 -->
	     <property name="plugins">
	         <array>
	         <!-- 配置分页插件 -->
	           <bean class="com.github.pagehelper.PageHelper">
	              <property name="properties">
	                 <props>
	                 <!-- 配置数据库方言，告诉pagehelper当前使用的数据库 -->
	                    <prop key="dialect">mysql</prop>
	                    
	                    <!-- 配置页码的合理化修正 -->
	                    <prop key="reasonable">true</prop>
	                 </props>
	              </property>
	           </bean>
	         </array>
	     </property>

	     
	</bean>
	
	<!-- 配置MapperScannerConfigurer来扫描Mapper接口所在包 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	   <property name="basePackage" value="com.ljw.ssm.mapper"></property>
	</bean> 
	
	<aop:aspectj-autoproxy/>
	<tx:annotation-driven transaction-manager="txManage" />
     
     <!-- 配置BCryptPasswordEncoderbean -->
<!--      <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
 -->
 <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
 <bean id="defaultWebSecurityExpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"></bean>
</beans>
